/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * API version: 3.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package strava

import (
	"time"
)

type DetailedSegment struct {
	// The unique identifier of this segment
	Id int64 `bson:"id" json:"id,omitempty"`
	// The name of this segment
	Name         string `bson:"name" json:"name,omitempty"`
	ActivityType string `bson:"activity_type" json:"activity_type,omitempty"`
	// The segment's distance, in meters
	Distance float32 `bson:"distance" json:"distance,omitempty"`
	// The segment's average grade, in percents
	AverageGrade float32 `bson:"average_grade" json:"average_grade,omitempty"`
	// The segments's maximum grade, in percents
	MaximumGrade float32 `bson:"maximum_grade" json:"maximum_grade,omitempty"`
	// The segments's highest elevation, in meters
	ElevationHigh float32 `bson:"elevation_high" json:"elevation_high,omitempty"`
	// The segments's lowest elevation, in meters
	ElevationLow float32    `bson:"elevation_low" json:"elevation_low,omitempty"`
	StartLatlng  *[]float32 `bson:"start_latlng" json:"start_latlng,omitempty"`
	EndLatlng    *[]float32 `bson:"end_latlng" json:"end_latlng,omitempty"`
	// The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category.
	ClimbCategory int32 `bson:"climb_category" json:"climb_category,omitempty"`
	// The segments's city.
	City string `bson:"city" json:"city,omitempty"`
	// The segments's state or geographical region.
	State string `bson:"state" json:"state,omitempty"`
	// The segment's country.
	Country string `bson:"country" json:"country,omitempty"`
	// Whether this segment is private.
	Private             bool                    `bson:"private" json:"private,omitempty"`
	AthletePrEffort     *SummarySegmentEffort   `bson:"athlete_pr_effort" json:"athlete_pr_effort,omitempty"`
	AthleteSegmentStats *SummaryPrSegmentEffort `bson:"athlete_segment_stats" json:"athlete_segment_stats,omitempty"`
	// The time at which the segment was created.
	CreatedAt time.Time `bson:"created_at" json:"created_at,omitempty"`
	// The time at which the segment was last updated.
	UpdatedAt time.Time `bson:"updated_at" json:"updated_at,omitempty"`
	// The segment's total elevation gain.
	TotalElevationGain float32      `bson:"total_elevation_gain" json:"total_elevation_gain,omitempty"`
	Map_               *PolylineMap `bson:"map" json:"map,omitempty"`
	// The total number of efforts for this segment
	EffortCount int32 `bson:"effort_count" json:"effort_count,omitempty"`
	// The number of unique athletes who have an effort for this segment
	AthleteCount int32 `bson:"athlete_count" json:"athlete_count,omitempty"`
	// Whether this segment is considered hazardous
	Hazardous bool `bson:"hazardous" json:"hazardous,omitempty"`
	// The number of stars for this segment
	StarCount int32 `bson:"star_count" json:"star_count,omitempty"`
}
